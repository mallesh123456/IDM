package com.abc.connectors.in10s;

import Thor.API.Exceptions.tcAPIException;
import Thor.API.Exceptions.tcColumnNotFoundException;
import Thor.API.Exceptions.tcFormNotFoundException;
import Thor.API.Exceptions.tcInvalidLookupException;
import Thor.API.Exceptions.tcNotAtomicProcessException;
import Thor.API.Exceptions.tcProcessNotFoundException;
import Thor.API.Exceptions.tcVersionNotDefinedException;
import Thor.API.Exceptions.tcVersionNotFoundException;
import Thor.API.Operations.tcFormDefinitionOperationsIntf;
import Thor.API.Operations.tcFormInstanceOperationsIntf;
import Thor.API.Operations.tcITResourceInstanceOperationsIntf;
import Thor.API.Operations.tcLookupOperationsIntf;
import Thor.API.Operations.tcProvisioningOperationsIntf;
import Thor.API.tcResultSet;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.Name;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;
import oracle.core.ojdl.logging.ODLLogger;
import oracle.iam.platform.Platform;

public class In10sUserOperations
{
  private String className = "In10sUserOperations";
  ODLLogger logger = ODLLogger.getODLLogger("IN10S.logger");
  private static String sFormsFieldLabel = "Structure Utility.Additional Columns.Field Label";
  private static String sFormsColumnName = "Structure Utility.Additional Columns.Name";
  
  public String createIn10sUser(String itResourceColumn, String processInstKey, String taskInstanceKey)
    throws Exception
  {
    String methodName = "createIn10sUser";
    this.logger.info("REP methodName ::" + methodName);
    
    String CODERESPONSE = "FAILED";
    String url = "";
    String serNS = "";
    String xsdNS = "";
    try
    {
      Map userAttrMap = getUserDefFormValue(processInstKey);
      
      String userLogin = (String)userAttrMap.get("User Login");
      String userType = (String)userAttrMap.get("Job Role Code");
      String displayName = (String)userAttrMap.get("Display Name");
      String firstName = (String)userAttrMap.get("First Name");
      String middleName = (String)userAttrMap.get("Middle Name");
      String lastName = (String)userAttrMap.get("Last Name");
      String employeeNumber = (String)userAttrMap.get("Employee Number");
      String mobile = (String)userAttrMap.get("Mobile");
      String email = (String)userAttrMap.get("Email");
      String distributionCenter = (String)userAttrMap.get("Distribution Center");
      String managerID = (String)userAttrMap.get("Manager Login");
      String circle = (String)userAttrMap.get("Circle");
      String city = (String)userAttrMap.get("City");
      String state = (String)userAttrMap.get("State");
      String functionalManager = (String)userAttrMap.get("Functional Manager");
      String userTypeCode = (String)userAttrMap.get("User Type Code");
      String relationshipType = (String)userAttrMap.get("Relationship Type");
      String channelType = (String)userAttrMap.get("Channel Type");
      String storeCode = (String)userAttrMap.get("Store Code");
      String storeName = (String)userAttrMap.get("Store Name");
      String companyCode = (String)userAttrMap.get("Company Code");
      String companyName = (String)userAttrMap.get("Company Name");
      String r4GState = (String)userAttrMap.get("R4G State");
      String title = (String)userAttrMap.get("Title");
      String startDate = (String)userAttrMap.get("Start Date");
      String endDate = (String)userAttrMap.get("End Date");
      String source = (String)userAttrMap.get("Source");
      String gender = (String)userAttrMap.get("Gender");
      String dateofBirth = (String)userAttrMap.get("Date of Birth");
      String employmentStatus = (String)userAttrMap.get("Employment Status");
      String employmentStatusText = (String)userAttrMap.get("Employment Status Text");
      String employeeDomainID = (String)userAttrMap.get("Employee Domain ID");
      String positionCode = (String)userAttrMap.get("Position Code");
      String positionText = (String)userAttrMap.get("Position Text");
      String locationCode = (String)userAttrMap.get("Location Code");
      String locationText = (String)userAttrMap.get("Location Text");
      String locationCountry = (String)userAttrMap.get("Location Country");
      String l1Name = (String)userAttrMap.get("L1 Name");
      String l1EMailID = (String)userAttrMap.get("L1 EMailID");
      String cadredescription = (String)userAttrMap.get("Cadre Description");
      String officeNo = (String)userAttrMap.get("Office Number");
      String orgHeadName = (String)userAttrMap.get("Organization Head Name");
      String officeHouseNo = (String)userAttrMap.get("Office House Number");
      String officeAddLine1 = (String)userAttrMap.get("Office Address Line1");
      String officeAddLine2 = (String)userAttrMap.get("Office Address Line2");
      String officeAddCity = (String)userAttrMap.get("Office Address City");
      String officeAddPin = (String)userAttrMap.get("Office Address Pin");
      String officeAddTelNo = (String)userAttrMap.get("Office Address Telephone Number");
      String group = (String)userAttrMap.get("Group");
      String locPinCode = (String)userAttrMap.get("Location Pin Code");
      String membership = (String)userAttrMap.get("MemberShip");
      String RVCZone = (String)userAttrMap.get("RVCZone");
      String aadharID = (String)userAttrMap.get("AadharID");
      String languages = (String)userAttrMap.get("Languages");
      this.logger.info("userLogin ::" + userLogin);
      this.logger.info("Languages ::" + languages);
      
      tcFormInstanceOperationsIntf formOps = (tcFormInstanceOperationsIntf)Platform.getService(tcFormInstanceOperationsIntf.class);
      
      tcResultSet rs = formOps.getProcessFormData(Long.parseLong(processInstKey));
      
      rs.goToRow(0);
      long itResInstanceKey = rs.getLongValue(itResourceColumn);
      tcITResourceInstanceOperationsIntf itResOps = (tcITResourceInstanceOperationsIntf)Platform.getService(tcITResourceInstanceOperationsIntf.class);
      
      tcResultSet rs1 = itResOps.getITResourceInstanceParameters(itResInstanceKey);
      
      Map itResAttrMap = new HashMap();
      int paramCount = rs1.getRowCount();
      for (int i = 0; i < paramCount; i++)
      {
        rs1.goToRow(i);
        itResAttrMap.put(rs1.getStringValue("IT Resources Type Parameter.Name"), rs1.getStringValue("IT Resources Type Parameter Value.Value"));
      }
      url = (String)itResAttrMap.get("URL");
      this.logger.info("REP URL::" + url);
      serNS = (String)itResAttrMap.get("ser");
      this.logger.info("REP serNS::" + serNS);
      xsdNS = (String)itResAttrMap.get("xsd");
      this.logger.info(" REP xsdNS::" + xsdNS);
      
      SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
      
      SOAPConnection soapConnection = soapConnectionFactory.createConnection();
      this.logger.info("REP SOAP Message ::" + userLogin);
      SOAPMessage soapRequest = createSOAPRequest(serNS, xsdNS, userLogin, userType, displayName, firstName, middleName, lastName, employeeNumber, mobile, email, distributionCenter, managerID, circle, city, state, functionalManager, userTypeCode, relationshipType, channelType, storeCode, storeName, companyCode, companyName, r4GState, title, startDate, endDate, source, gender, dateofBirth, employmentStatus, employmentStatusText, employeeDomainID, officeNo, positionCode, positionText, locationCode, locationText, locationCountry, l1Name, l1EMailID, cadredescription, orgHeadName, officeHouseNo, officeAddLine1, officeAddLine2, officeAddCity, officeAddPin, officeAddTelNo, group, locPinCode, membership, RVCZone, aadharID, languages);
      if (!soapRequest.equals(null))
      {
        this.logger.info("::REP SOAP Request Created");
        try
        {
          SOAPMessage soapResponse = soapConnection.call(soapRequest, url);
          
          this.logger.info("REP SOAP request message::" + getSOAPMsg(soapResponse));
          
          this.logger.info("Called REP IN10S SOAP url successfully");
          
          Iterator iterator = soapResponse.getSOAPBody().getChildElements();
          
          SOAPElement element = (SOAPElement)iterator.next();
          System.out.println(element.getElementName().getLocalName());
          SOAPElement returnRequest = getChildElement(element, "return");
          
          SOAPElement responseID = getChildElement(returnRequest, "responseID");
          
          SOAPElement operationStatus = getChildElement(returnRequest, "operationStatus");
          
          SOAPElement errorCode = getChildElement(returnRequest, "errorCode");
          
          SOAPElement errorMsg = getChildElement(returnRequest, "errorMsg");
          
          this.logger.info("::1 responseID::" + responseID.getValue());
          
          this.logger.info("::2 operationStatus::" + operationStatus.getValue());
          
          this.logger.info("::3 errorCode::" + errorCode.getValue());
          this.logger.info("::4 errorMsg::" + errorMsg.getValue());
          updateTaskNote(errorMsg.getValue(), taskInstanceKey);
          CODERESPONSE = operationStatus.getValue();
        }
        catch (Exception e)
        {
          this.logger.info("::Error in calling IN10S web service::" + e.getMessage());
          
          updateTaskNote(e.getMessage(), taskInstanceKey);
          e.printStackTrace();
          throw new Exception("Error in creating user in IN10S");
        }
      }
      try
      {
        soapConnection.close();
      }
      catch (Exception e)
      {
        this.logger.info(e.getMessage());
      }
    }
    catch (Exception e)
    {
      this.logger.info(e.getMessage());
    }
    return CODERESPONSE;
  }
  
  public SOAPMessage createSOAPRequest(String serNS, String xsdNS, String userLogin, String userType, String displayName, String firstName, String middleName, String lastName, String employeeNumber, String mobile, String email, String distributionCenter, String managerID, String circle, String city, String state, String functionalManager, String userTypeCode, String relationshipType, String channelType, String storeCode, String storeName, String companyCode, String companyName, String r4GState, String title, String startDate, String endDate, String source, String gender, String dateofBirth, String employmentStatus, String employmentStatusText, String employeeDomainID, String officeNo, String positionCode, String positionText, String locationCode, String locationText, String locationCountry, String l1Name, String l1EMailID, String cadredescription, String orgHeadName, String officeHouseNo, String officeAddLine1, String officeAddLine2, String officeAddCity, String officeAddPin, String officeAddTelNo, String group, String locPinCode, String membership, String RVCZone, String aadharID, String languages)
    throws Exception
  {
    String sourceMethod = "createSOAPRequest";
    this.logger.info(sourceMethod + " Entering ");
    
    MessageFactory messageFactory = MessageFactory.newInstance();
    SOAPMessage soapMessage = messageFactory.createMessage();
    SOAPPart soapPart = soapMessage.getSOAPPart();
    
    SOAPEnvelope envelope = soapPart.getEnvelope();
    envelope.addNamespaceDeclaration("ser", serNS);
    envelope.addNamespaceDeclaration("xsd", xsdNS);
    
    SOAPBody soapBody = envelope.getBody();
    SOAPElement addUser = soapBody.addChildElement("AddUser", "ser");
    SOAPElement requestParams = addUser.addChildElement("requestParams", "ser");
    
    SOAPElement usrLogin = requestParams.addChildElement("userLogin", "xsd");
    usrLogin.addTextNode(userLogin);
    SOAPElement usrType = requestParams.addChildElement("userType", "xsd");
    usrType.addTextNode(userType);
    if (!displayName.equals(""))
    {
      SOAPElement dispName = requestParams.addChildElement("displayName", "xsd");
      
      dispName.addTextNode(displayName);
    }
    if (!firstName.equals(""))
    {
      SOAPElement fName = requestParams.addChildElement("firstName", "xsd");
      
      fName.addTextNode(firstName);
    }
    if (!middleName.equals(""))
    {
      SOAPElement mName = requestParams.addChildElement("middleName", "xsd");
      
      mName.addTextNode(middleName);
    }
    if (!lastName.equals(""))
    {
      SOAPElement lName = requestParams.addChildElement("lastName", "xsd");
      
      lName.addTextNode(lastName);
    }
    if (!employeeNumber.equals(""))
    {
      SOAPElement employeeN = requestParams.addChildElement("employeeNumber", "xsd");
      
      employeeN.addTextNode(employeeNumber);
    }
    if (!mobile.equals(""))
    {
      SOAPElement mobi = requestParams.addChildElement("mobile", "xsd");
      mobi.addTextNode(mobile);
    }
    if (!email.equals(""))
    {
      SOAPElement ema = requestParams.addChildElement("email", "xsd");
      ema.addTextNode(email);
    }
    if (!distributionCenter.equals(""))
    {
      SOAPElement distributionC = requestParams.addChildElement("distributionCenter", "xsd");
      
      distributionC.addTextNode(distributionCenter);
    }
    if (!managerID.equals(""))
    {
      SOAPElement managerI = requestParams.addChildElement("managerID", "xsd");
      
      managerI.addTextNode(managerID);
    }
    if (!circle.equals(""))
    {
      SOAPElement circ = requestParams.addChildElement("circle", "xsd");
      circ.addTextNode(circle);
      System.out.println("After circle");
    }
    if (!city.equals(""))
    {
      SOAPElement cit = requestParams.addChildElement("city", "xsd");
      cit.addTextNode(city);
    }
    if (!state.equals(""))
    {
      SOAPElement sta = requestParams.addChildElement("state", "xsd");
      sta.addTextNode(state);
    }
    if (!functionalManager.equals(""))
    {
      SOAPElement functionalM = requestParams.addChildElement("functionalManager", "xsd");
      
      functionalM.addTextNode(functionalManager);
    }
    if (!userTypeCode.equals(""))
    {
      SOAPElement userTypeC = requestParams.addChildElement("userTypeCode", "xsd");
      
      userTypeC.addTextNode(userTypeCode);
    }
    if (!relationshipType.equals(""))
    {
      SOAPElement relationshipT = requestParams.addChildElement("relationshipType", "xsd");
      
      relationshipT.addTextNode(relationshipType);
    }
    if (!channelType.equals(""))
    {
      SOAPElement channelT = requestParams.addChildElement("channelType", "xsd");
      
      channelT.addTextNode(channelType);
    }
    if (!storeCode.equals(""))
    {
      SOAPElement storeC = requestParams.addChildElement("storeCode", "xsd");
      
      storeC.addTextNode(storeCode);
    }
    if (!storeName.equals(""))
    {
      SOAPElement storeN = requestParams.addChildElement("storeName", "xsd");
      
      storeN.addTextNode(storeName);
    }
    if (!companyCode.equals(""))
    {
      SOAPElement companyC = requestParams.addChildElement("companyCode", "xsd");
      
      companyC.addTextNode(companyCode);
    }
    if (!companyName.equals(""))
    {
      SOAPElement companyN = requestParams.addChildElement("companyName", "xsd");
      
      companyN.addTextNode(companyName);
    }
    if (!r4GState.equals(""))
    {
      SOAPElement r4G = requestParams.addChildElement("r4GState", "xsd");
      r4G.addTextNode(r4GState);
    }
    if (!title.equals(""))
    {
      SOAPElement tit = requestParams.addChildElement("title", "xsd");
      tit.addTextNode(title);
    }
    if (!startDate.equals(""))
    {
      SOAPElement startD = requestParams.addChildElement("startDate", "xsd");
      
      startD.addTextNode(startDate);
    }
    if (!endDate.equals(""))
    {
      SOAPElement endD = requestParams.addChildElement("endDate", "xsd");
      endD.addTextNode(endDate);
    }
    if (!source.equals(""))
    {
      SOAPElement sour = requestParams.addChildElement("source", "xsd");
      sour.addTextNode(source);
    }
    if (!gender.equals(""))
    {
      SOAPElement gen = requestParams.addChildElement("gender", "xsd");
      gen.addTextNode(gender);
    }
    if (!dateofBirth.equals(""))
    {
      SOAPElement dateofB = requestParams.addChildElement("dateofBirth", "xsd");
      
      dateofB.addTextNode(dateofBirth);
    }
    if (!employmentStatus.equals(""))
    {
      SOAPElement employmentS = requestParams.addChildElement("employmentStatus", "xsd");
      
      employmentS.addTextNode(employmentStatus);
    }
    if (!employmentStatusText.equals(""))
    {
      SOAPElement employmentStatusT = requestParams.addChildElement("employmentStatusText", "xsd");
      
      employmentStatusT.addTextNode(employmentStatusText);
    }
    if (!employeeDomainID.equals(""))
    {
      SOAPElement employeeDo = requestParams.addChildElement("employeeDomainID", "xsd");
      
      employeeDo.addTextNode(employeeDomainID);
    }
    if (!officeNo.equals(""))
    {
      SOAPElement officeN = requestParams.addChildElement("officeNo", "xsd");
      
      officeN.addTextNode(officeNo);
    }
    if (!positionCode.equals(""))
    {
      SOAPElement positionCo = requestParams.addChildElement("positionCode", "xsd");
      
      positionCo.addTextNode(positionCode);
    }
    if (!positionText.equals(""))
    {
      SOAPElement positionT = requestParams.addChildElement("positionText", "xsd");
      
      positionT.addTextNode(positionText);
    }
    if (!locationCode.equals(""))
    {
      SOAPElement locationCo = requestParams.addChildElement("locationCode", "xsd");
      
      locationCo.addTextNode(locationCode);
    }
    if (!locationText.equals(""))
    {
      SOAPElement locationTe = requestParams.addChildElement("locationText", "xsd");
      
      locationTe.addTextNode(locationText);
    }
    if (!locationCountry.equals(""))
    {
      SOAPElement locationCou = requestParams.addChildElement("locationCountry", "xsd");
      
      locationCou.addTextNode(locationCountry);
    }
    if (!l1Name.equals(""))
    {
      SOAPElement l1Nam = requestParams.addChildElement("l1Name", "xsd");
      l1Nam.addTextNode(l1Name);
    }
    if (!l1EMailID.equals(""))
    {
      SOAPElement l1EMa = requestParams.addChildElement("l1EMailID", "xsd");
      
      l1EMa.addTextNode(l1EMailID);
    }
    if (!cadredescription.equals(""))
    {
      SOAPElement cadred = requestParams.addChildElement("cadredescription", "xsd");
      
      cadred.addTextNode(cadredescription);
    }
    if (!orgHeadName.equals(""))
    {
      SOAPElement HeadName = requestParams.addChildElement("orgHeadName", "xsd");
      
      HeadName.addTextNode(orgHeadName);
    }
    if (!officeHouseNo.equals(""))
    {
      SOAPElement HouseNo = requestParams.addChildElement("officeHouseNo", "xsd");
      
      HouseNo.addTextNode(officeHouseNo);
    }
    if (!officeAddLine1.equals(""))
    {
      SOAPElement AddLine1 = requestParams.addChildElement("officeAddLine1", "xsd");
      
      AddLine1.addTextNode(officeAddLine1);
    }
    if (!officeAddLine2.equals(""))
    {
      SOAPElement AddLine2 = requestParams.addChildElement("officeAddLine2", "xsd");
      
      AddLine2.addTextNode(officeAddLine2);
    }
    if (!officeAddCity.equals(""))
    {
      SOAPElement AddCity = requestParams.addChildElement("officeAddCity", "xsd");
      
      AddCity.addTextNode(officeAddCity);
    }
    if (!officeAddPin.equals(""))
    {
      SOAPElement AddPin = requestParams.addChildElement("officeAddPin", "xsd");
      
      AddPin.addTextNode(officeAddPin);
    }
    if (!officeAddTelNo.equals(""))
    {
      SOAPElement offAddTelNo = requestParams.addChildElement("officeAddTelNo", "xsd");
      
      offAddTelNo.addTextNode(officeAddTelNo);
    }
    if (!group.equals(""))
    {
      SOAPElement grp = requestParams.addChildElement("group", "xsd");
      grp.addTextNode(group);
    }
    if (!locPinCode.equals(""))
    {
      SOAPElement lPinCode = requestParams.addChildElement("locPinCode", "xsd");
      
      lPinCode.addTextNode(locPinCode);
    }
    if (!membership.equals(""))
    {
      SOAPElement memship = requestParams.addChildElement("membership", "xsd");
      
      memship.addTextNode(membership);
    }
    if (!RVCZone.equals(""))
    {
      SOAPElement RVC = requestParams.addChildElement("RVCZone", "xsd");
      RVC.addTextNode(RVCZone);
    }
    if (!aadharID.equals(""))
    {
      SOAPElement adhrID = requestParams.addChildElement("aadharID", "xsd");
      
      adhrID.addTextNode(aadharID);
    }
    if (!languages.equals(""))
    {
      SOAPElement lang = requestParams.addChildElement("languages", "xsd");
      
      lang.addTextNode(languages);
    }
    soapMessage.saveChanges();
    this.logger.info("SOAP request message::" + getSOAPMsg(soapMessage));
    return soapMessage;
  }
  
  public String updateIn10sUser(String itResourceColumn, String processInstKey, String taskInstanceKey, String userLogin, String userType, String state, String firstName, String lastName, String city, String locPinCode, String displayName, String employeeNumber, String distributionCenter, String storeCode, String field, String value)
    throws Exception
  {
    String middleName = "";
    
    String mobile = "";
    String email = "";
    
    String managerID = "";
    String circle = "";
    
    String functionalManager = "";
    String userTypeCode = "";
    String relationshipType = "";
    String channelType = "";
    
    String storeName = "";
    String companyCode = "";
    String companyName = "";
    String r4GState = "";
    String title = "";
    String startDate = "";
    String endDate = "";
    String source = "";
    String gender = "";
    String dateofBirth = "";
    String employmentStatus = "";
    String employmentStatusText = "";
    String employeeDomainID = "";
    String officeNo = "";
    String positionCode = "";
    String positionText = "";
    String locationCode = "";
    String locationText = "";
    String locationCountry = "";
    String l1Name = "";
    String l1EMailID = "";
    String cadredescription = "";
    String orgHeadName = "";
    String officeHouseNo = "";
    String officeAddLine1 = "";
    String officeAddLine2 = "";
    String officeAddCity = "";
    String officeAddPin = "";
    String officeAddTelNo = "";
    String group = "";
    
    String membership = "";
    String RVCZone = "";
    String languages = "";
    String aadharID = "";
    
    String CODERESPONSE = "FAILED";
    String url = "";
    String serNS = "";
    String xsdNS = "";
    try
    {
      tcFormInstanceOperationsIntf formOps = (tcFormInstanceOperationsIntf)Platform.getService(tcFormInstanceOperationsIntf.class);
      
      tcResultSet rs = formOps.getProcessFormData(Long.parseLong(processInstKey));
      
      rs.goToRow(0);
      long itResInstanceKey = rs.getLongValue(itResourceColumn);
      tcITResourceInstanceOperationsIntf itResOps = (tcITResourceInstanceOperationsIntf)Platform.getService(tcITResourceInstanceOperationsIntf.class);
      
      tcResultSet rs1 = itResOps.getITResourceInstanceParameters(itResInstanceKey);
      
      Map itResAttrMap = new HashMap();
      int paramCount = rs1.getRowCount();
      for (int i = 0; i < paramCount; i++)
      {
        rs1.goToRow(i);
        itResAttrMap.put(rs1.getStringValue("IT Resources Type Parameter.Name"), rs1.getStringValue("IT Resources Type Parameter Value.Value"));
      }
      url = (String)itResAttrMap.get("URL");
      this.logger.info("URL::" + url);
      serNS = (String)itResAttrMap.get("ser");
      this.logger.info("serNS::" + serNS);
      xsdNS = (String)itResAttrMap.get("xsd");
      this.logger.info("xsdNS::" + xsdNS);
    }
    catch (Exception e)
    {
      this.logger.severe("Could not get IN10S IT Resource data!!");
      updateTaskNote(e.getMessage(), taskInstanceKey);
      e.printStackTrace();
    }
    SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
    
    SOAPConnection soapConnection = soapConnectionFactory.createConnection();
    if ((field.equals("AadharID")) && (!value.isEmpty())) {
      aadharID = value;
    }
    if ((field.equals("Cadre Description")) && (!value.isEmpty())) {
      cadredescription = value;
    }
    if ((field.equals("Channel Type")) && (!value.isEmpty())) {
      channelType = value;
    }
    if ((field.equals("Circle")) && (!value.isEmpty())) {
      circle = value;
    }
    if ((field.equals("City")) && (!value.isEmpty())) {
      city = value;
    }
    if ((field.equals("Company Code")) && (!value.isEmpty())) {
      companyCode = value;
    }
    if ((field.equals("Company Name")) && (!value.isEmpty())) {
      companyName = value;
    }
    if ((field.equals("Date of Birth")) && (!value.isEmpty())) {
      dateofBirth = value;
    }
    if ((field.equals("Display Name")) && (!value.isEmpty())) {
      displayName = value;
    }
    if ((field.equals("Distribution Center")) && (!value.isEmpty())) {
      distributionCenter = value;
    }
    if ((field.equals("Email")) && (!value.isEmpty())) {
      email = value;
    }
    if ((field.equals("Employee Domain ID")) && (!value.isEmpty())) {
      employeeDomainID = value;
    }
    if ((field.equals("Employee Number")) && (!value.isEmpty())) {
      employeeNumber = value;
    }
    if ((field.equals("Employment Status")) && (!value.isEmpty())) {
      employmentStatus = value;
    }
    if ((field.equals("Employment Status Text")) && (!value.isEmpty())) {
      employmentStatusText = value;
    }
    if ((field.equals("End Date")) && (!value.isEmpty())) {
      endDate = value;
    }
    if ((field.equals("First Name")) && (!value.isEmpty()))
    {
      this.logger.info("value" + value);
      firstName = value;
    }
    if ((field.equals("Functional Manager")) && (!value.isEmpty())) {
      functionalManager = value;
    }
    if ((field.equals("Gender")) && (!value.isEmpty())) {
      gender = value;
    }
    if ((field.equals("Group")) && (!value.isEmpty())) {
      group = value;
    }
    if ((field.equals("L1 EMailID")) && (!value.isEmpty())) {
      l1EMailID = value;
    }
    if ((field.equals("L1 Name")) && (!value.isEmpty())) {
      l1Name = value;
    }
    if ((field.equals("Languages")) && (!value.isEmpty())) {
      languages = value;
    }
    if ((field.equals("Last Name")) && (!value.isEmpty())) {
      lastName = value;
    }
    if ((field.equals("Location Code")) && (!value.isEmpty())) {
      locationCode = value;
    }
    if ((field.equals("Location Country")) && (!value.isEmpty())) {
      locationCountry = value;
    }
    if ((field.equals("Location Pin Code")) && (!value.isEmpty())) {
      locPinCode = value;
    }
    if ((field.equals("Location Text")) && (!value.isEmpty())) {
      locationText = value;
    }
    if ((field.equals("Manager Login")) && (!value.isEmpty())) {
      managerID = value;
    }
    if ((field.equals("Membership")) && (!value.isEmpty())) {
      membership = value;
    }
    if ((field.equals("Middle Name")) && (!value.isEmpty())) {
      middleName = value;
    }
    if ((field.equals("Mobile")) && (!value.isEmpty())) {
      mobile = value;
    }
    if ((field.equals("Office Address City")) && (!value.isEmpty())) {
      officeAddCity = value;
    }
    if ((field.equals("Office Address Line1")) && (!value.isEmpty())) {
      officeAddLine1 = value;
    }
    if ((field.equals("Office Address Line2")) && (!value.isEmpty())) {
      officeAddLine2 = value;
    }
    if ((field.equals("Office Address Pin")) && (!value.isEmpty())) {
      officeAddPin = value;
    }
    if ((field.equals("Office Address Telephone Number")) && (!value.isEmpty())) {
      officeAddTelNo = value;
    }
    if ((field.equals("Office House Number")) && (!value.isEmpty())) {
      officeHouseNo = value;
    }
    if ((field.equals("Office Number")) && (!value.isEmpty())) {
      officeNo = value;
    }
    if ((field.equals("Organization Head Name")) && (!value.isEmpty())) {
      orgHeadName = value;
    }
    if ((field.equals("Position Code")) && (!value.isEmpty())) {
      positionCode = value;
    }
    if ((field.equals("Position Text")) && (!value.isEmpty())) {
      positionText = value;
    }
    if ((field.equals("R4G State")) && (!value.isEmpty())) {
      r4GState = value;
    }
    if ((field.equals("Relationship Type")) && (!value.isEmpty())) {
      relationshipType = value;
    }
    if ((field.equals("RVCZone")) && (!value.isEmpty())) {
      RVCZone = value;
    }
    if ((field.equals("Source")) && (!value.isEmpty())) {
      source = value;
    }
    if ((field.equals("Start Date")) && (!value.isEmpty())) {
      startDate = value;
    }
    if ((field.equals("State")) && (!value.isEmpty())) {
      state = value;
    }
    if ((field.equals("Store Code")) && (!value.isEmpty())) {
      storeCode = value;
    }
    if ((field.equals("Store Name")) && (!value.isEmpty())) {
      storeName = value;
    }
    if ((field.equals("Title")) && (!value.isEmpty())) {
      title = value;
    }
    SOAPMessage soapRequest = updateSOAPRequest(serNS, xsdNS, userLogin, userType, displayName, firstName, middleName, lastName, employeeNumber, mobile, email, distributionCenter, managerID, circle, city, state, functionalManager, userTypeCode, relationshipType, channelType, storeCode, storeName, companyCode, companyName, r4GState, title, startDate, endDate, source, gender, dateofBirth, employmentStatus, employmentStatusText, employeeDomainID, officeNo, positionCode, positionText, locationCode, locationText, locationCountry, l1Name, l1EMailID, cadredescription, orgHeadName, officeHouseNo, officeAddLine1, officeAddLine2, officeAddCity, officeAddPin, officeAddTelNo, group, locPinCode, membership, RVCZone, aadharID, languages);
    if (!soapRequest.equals(null))
    {
      this.logger.info("::SOAP Request Created");
      try
      {
        SOAPMessage soapResponse = soapConnection.call(soapRequest, url);
        
        this.logger.info("SOAP request message::" + getSOAPMsg(soapResponse));
        
        this.logger.info("called IN10S SOAP url successfully");
        
        Iterator iterator = soapResponse.getSOAPBody().getChildElements();
        
        SOAPElement element = (SOAPElement)iterator.next();
        System.out.println(element.getElementName().getLocalName());
        SOAPElement returnRequest = getChildElement(element, "return");
        SOAPElement responseID = getChildElement(returnRequest, "responseID");
        
        SOAPElement operationStatus = getChildElement(returnRequest, "operationStatus");
        
        SOAPElement errorCode = getChildElement(returnRequest, "errorCode");
        
        SOAPElement errorMsg = getChildElement(returnRequest, "errorMsg");
        
        this.logger.info("::1 responseID::" + responseID.getValue());
        this.logger.info("::2 operationStatus::" + operationStatus.getValue());
        
        this.logger.info("::3 errorCode::" + errorCode.getValue());
        this.logger.info("::4 errorMsg::" + errorMsg.getValue());
        CODERESPONSE = operationStatus.getValue();
      }
      catch (Exception e)
      {
        this.logger.info("::Error in calling IN10S web service::" + e.getMessage());
        
        updateTaskNote(e.getMessage(), taskInstanceKey);
        e.printStackTrace();
        throw new Exception("Error in creating user in IN10S");
      }
    }
    try
    {
      soapConnection.close();
    }
    catch (Exception e)
    {
      this.logger.info(e.getMessage());
    }
    return CODERESPONSE;
  }
  
  public SOAPMessage updateSOAPRequest(String serNS, String xsdNS, String userLogin, String userType, String displayName, String firstName, String middleName, String lastName, String employeeNumber, String mobile, String email, String distributionCenter, String managerID, String circle, String city, String state, String functionalManager, String userTypeCode, String relationshipType, String channelType, String storeCode, String storeName, String companyCode, String companyName, String r4GState, String title, String startDate, String endDate, String source, String gender, String dateofBirth, String employmentStatus, String employmentStatusText, String employeeDomainID, String officeNo, String positionCode, String positionText, String locationCode, String locationText, String locationCountry, String l1Name, String l1EMailID, String cadredescription, String orgHeadName, String officeHouseNo, String officeAddLine1, String officeAddLine2, String officeAddCity, String officeAddPin, String officeAddTelNo, String group, String locPinCode, String membership, String RVCZone, String aadharID, String languages)
    throws Exception
  {
    String sourceMethod = "updateSOAPRequest";
    this.logger.info(sourceMethod + " Entering ");
    
    MessageFactory messageFactory = MessageFactory.newInstance();
    SOAPMessage soapMessage = messageFactory.createMessage();
    SOAPPart soapPart = soapMessage.getSOAPPart();
    
    SOAPEnvelope envelope = soapPart.getEnvelope();
    envelope.addNamespaceDeclaration("ser", serNS);
    envelope.addNamespaceDeclaration("xsd", xsdNS);
    
    SOAPBody soapBody = envelope.getBody();
    SOAPElement addUser = soapBody.addChildElement("UpdateUser", "ser");
    SOAPElement requestParams = addUser.addChildElement("requestParams", "ser");
    
    SOAPElement usrLogin = requestParams.addChildElement("userLogin", "xsd");
    
    usrLogin.addTextNode(userLogin);
    if (!userType.equals(""))
    {
      SOAPElement usrType = requestParams.addChildElement("userType", "xsd");
      
      usrType.addTextNode(userType);
    }
    if (!displayName.equals(""))
    {
      SOAPElement dispName = requestParams.addChildElement("displayName", "xsd");
      
      dispName.addTextNode(displayName);
    }
    if (!firstName.equals(""))
    {
      SOAPElement fName = requestParams.addChildElement("firstName", "xsd");
      
      fName.addTextNode(firstName);
    }
    if (!middleName.equals(""))
    {
      SOAPElement mName = requestParams.addChildElement("middleName", "xsd");
      
      mName.addTextNode(middleName);
    }
    if (!lastName.equals(""))
    {
      SOAPElement lName = requestParams.addChildElement("lastName", "xsd");
      
      lName.addTextNode(lastName);
    }
    if (!employeeNumber.equals(""))
    {
      SOAPElement employeeN = requestParams.addChildElement("employeeNumber", "xsd");
      
      employeeN.addTextNode(employeeNumber);
    }
    if (!mobile.equals(""))
    {
      SOAPElement mobi = requestParams.addChildElement("mobile", "xsd");
      mobi.addTextNode(mobile);
    }
    if (!email.equals(""))
    {
      SOAPElement ema = requestParams.addChildElement("email", "xsd");
      ema.addTextNode(email);
    }
    if (!distributionCenter.equals(""))
    {
      SOAPElement distributionC = requestParams.addChildElement("distributionCenter", "xsd");
      
      distributionC.addTextNode(distributionCenter);
    }
    if (!managerID.equals(""))
    {
      SOAPElement managerI = requestParams.addChildElement("managerID", "xsd");
      
      managerI.addTextNode(managerID);
    }
    if (!circle.equals(""))
    {
      SOAPElement circ = requestParams.addChildElement("circle", "xsd");
      circ.addTextNode(circle);
      System.out.println("After circle");
    }
    if (!city.equals(""))
    {
      SOAPElement cit = requestParams.addChildElement("city", "xsd");
      cit.addTextNode(city);
    }
    if (!state.equals(""))
    {
      SOAPElement sta = requestParams.addChildElement("state", "xsd");
      sta.addTextNode(state);
    }
    if (!functionalManager.equals(""))
    {
      SOAPElement functionalM = requestParams.addChildElement("functionalManager", "xsd");
      
      functionalM.addTextNode(functionalManager);
    }
    if (!userTypeCode.equals(""))
    {
      SOAPElement userTypeC = requestParams.addChildElement("userTypeCode", "xsd");
      
      userTypeC.addTextNode(userTypeCode);
    }
    if (!relationshipType.equals(""))
    {
      SOAPElement relationshipT = requestParams.addChildElement("relationshipType", "xsd");
      
      relationshipT.addTextNode(relationshipType);
    }
    if (!channelType.equals(""))
    {
      SOAPElement channelT = requestParams.addChildElement("channelType", "xsd");
      
      channelT.addTextNode(channelType);
    }
    if (!storeCode.equals(""))
    {
      SOAPElement storeC = requestParams.addChildElement("storeCode", "xsd");
      
      storeC.addTextNode(storeCode);
    }
    if (!storeName.equals(""))
    {
      SOAPElement storeN = requestParams.addChildElement("storeName", "xsd");
      
      storeN.addTextNode(storeName);
    }
    if (!companyCode.equals(""))
    {
      SOAPElement companyC = requestParams.addChildElement("companyCode", "xsd");
      
      companyC.addTextNode(companyCode);
    }
    if (!companyName.equals(""))
    {
      SOAPElement companyN = requestParams.addChildElement("companyName", "xsd");
      
      companyN.addTextNode(companyName);
    }
    if (!r4GState.equals(""))
    {
      SOAPElement r4G = requestParams.addChildElement("r4GState", "xsd");
      r4G.addTextNode(r4GState);
    }
    if (!title.equals(""))
    {
      SOAPElement tit = requestParams.addChildElement("title", "xsd");
      tit.addTextNode(title);
    }
    if (!startDate.equals(""))
    {
      SOAPElement startD = requestParams.addChildElement("startDate", "xsd");
      
      startD.addTextNode(startDate);
    }
    if (!endDate.equals(""))
    {
      SOAPElement endD = requestParams.addChildElement("endDate", "xsd");
      endD.addTextNode(endDate);
    }
    if (!source.equals(""))
    {
      SOAPElement sour = requestParams.addChildElement("source", "xsd");
      sour.addTextNode(source);
    }
    if (!gender.equals(""))
    {
      SOAPElement gen = requestParams.addChildElement("gender", "xsd");
      gen.addTextNode(gender);
    }
    if (!dateofBirth.equals(""))
    {
      SOAPElement dateofB = requestParams.addChildElement("dateofBirth", "xsd");
      
      dateofB.addTextNode(dateofBirth);
    }
    if (!employmentStatus.equals(""))
    {
      SOAPElement employmentS = requestParams.addChildElement("employmentStatus", "xsd");
      
      employmentS.addTextNode(employmentStatus);
    }
    if (!employmentStatusText.equals(""))
    {
      SOAPElement employmentStatusT = requestParams.addChildElement("employmentStatusText", "xsd");
      
      employmentStatusT.addTextNode(employmentStatusText);
    }
    if (!employeeDomainID.equals(""))
    {
      SOAPElement employeeDo = requestParams.addChildElement("employeeDomainID", "xsd");
      
      employeeDo.addTextNode(employeeDomainID);
    }
    if (!officeNo.equals(""))
    {
      SOAPElement officeN = requestParams.addChildElement("officeNo", "xsd");
      
      officeN.addTextNode(officeNo);
    }
    if (!positionCode.equals(""))
    {
      SOAPElement positionCo = requestParams.addChildElement("positionCode", "xsd");
      
      positionCo.addTextNode(positionCode);
    }
    if (!positionText.equals(""))
    {
      SOAPElement positionT = requestParams.addChildElement("positionText", "xsd");
      
      positionT.addTextNode(positionText);
    }
    if (!locationCode.equals(""))
    {
      SOAPElement locationCo = requestParams.addChildElement("locationCode", "xsd");
      
      locationCo.addTextNode(locationCode);
    }
    if (!locationText.equals(""))
    {
      SOAPElement locationTe = requestParams.addChildElement("locationText", "xsd");
      
      locationTe.addTextNode(locationText);
    }
    if (!locationCountry.equals(""))
    {
      SOAPElement locationCou = requestParams.addChildElement("locationCountry", "xsd");
      
      locationCou.addTextNode(locationCountry);
    }
    if (!l1Name.equals(""))
    {
      SOAPElement l1Nam = requestParams.addChildElement("l1Name", "xsd");
      l1Nam.addTextNode(l1Name);
    }
    if (!l1EMailID.equals(""))
    {
      SOAPElement l1EMa = requestParams.addChildElement("l1EMailID", "xsd");
      
      l1EMa.addTextNode(l1EMailID);
    }
    if (!cadredescription.equals(""))
    {
      SOAPElement cadred = requestParams.addChildElement("cadredescription", "xsd");
      
      cadred.addTextNode(cadredescription);
    }
    if (!orgHeadName.equals(""))
    {
      SOAPElement HeadName = requestParams.addChildElement("orgHeadName", "xsd");
      
      HeadName.addTextNode(orgHeadName);
    }
    if (!officeHouseNo.equals(""))
    {
      SOAPElement HouseNo = requestParams.addChildElement("officeHouseNo", "xsd");
      
      HouseNo.addTextNode(officeHouseNo);
    }
    if (!officeAddLine1.equals(""))
    {
      SOAPElement AddLine1 = requestParams.addChildElement("officeAddLine1", "xsd");
      
      AddLine1.addTextNode(officeAddLine1);
    }
    if (!officeAddLine2.equals(""))
    {
      SOAPElement AddLine2 = requestParams.addChildElement("officeAddLine2", "xsd");
      
      AddLine2.addTextNode(officeAddLine2);
    }
    if (!officeAddCity.equals(""))
    {
      SOAPElement AddCity = requestParams.addChildElement("officeAddCity", "xsd");
      
      AddCity.addTextNode(officeAddCity);
    }
    if (!officeAddPin.equals(""))
    {
      SOAPElement AddPin = requestParams.addChildElement("officeAddPin", "xsd");
      
      AddPin.addTextNode(officeAddPin);
    }
    if (!officeAddTelNo.equals(""))
    {
      SOAPElement offAddTelNo = requestParams.addChildElement("officeAddTelNo", "xsd");
      
      offAddTelNo.addTextNode(officeAddTelNo);
    }
    if (!group.equals(""))
    {
      SOAPElement grp = requestParams.addChildElement("group", "xsd");
      grp.addTextNode(group);
    }
    if (!locPinCode.equals(""))
    {
      SOAPElement lPinCode = requestParams.addChildElement("locPinCode", "xsd");
      
      lPinCode.addTextNode(locPinCode);
    }
    if (!membership.equals(""))
    {
      SOAPElement memship = requestParams.addChildElement("membership", "xsd");
      
      memship.addTextNode(membership);
    }
    if (!RVCZone.equals(""))
    {
      SOAPElement RVC = requestParams.addChildElement("RVCZone", "xsd");
      RVC.addTextNode(RVCZone);
    }
    if (!aadharID.equals(""))
    {
      SOAPElement adhrID = requestParams.addChildElement("aadharID", "xsd");
      
      adhrID.addTextNode(aadharID);
    }
    if (!languages.equals(""))
    {
      SOAPElement lang = requestParams.addChildElement("languages", "xsd");
      
      lang.addTextNode(languages);
    }
    soapMessage.saveChanges();
    this.logger.info("SOAP request message::" + getSOAPMsg(soapMessage));
    return soapMessage;
  }
  
  public String deleteIn10sUser(String itResourceColumn, String processInstKey, String taskInstanceKey, String userLogin)
    throws Exception
  {
    String CODERESPONSE = "FAILED";
    String url = "";
    String serNS = "";
    String xsdNS = "";
    try
    {
      tcFormInstanceOperationsIntf formOps = (tcFormInstanceOperationsIntf)Platform.getService(tcFormInstanceOperationsIntf.class);
      
      tcResultSet rs = formOps.getProcessFormData(Long.parseLong(processInstKey));
      
      rs.goToRow(0);
      long itResInstanceKey = rs.getLongValue(itResourceColumn);
      tcITResourceInstanceOperationsIntf itResOps = (tcITResourceInstanceOperationsIntf)Platform.getService(tcITResourceInstanceOperationsIntf.class);
      
      tcResultSet rs1 = itResOps.getITResourceInstanceParameters(itResInstanceKey);
      
      Map itResAttrMap = new HashMap();
      int paramCount = rs1.getRowCount();
      for (int i = 0; i < paramCount; i++)
      {
        rs1.goToRow(i);
        itResAttrMap.put(rs1.getStringValue("IT Resources Type Parameter.Name"), rs1.getStringValue("IT Resources Type Parameter Value.Value"));
      }
      url = (String)itResAttrMap.get("URL");
      this.logger.info("URL::" + url);
      serNS = (String)itResAttrMap.get("ser");
      this.logger.info("serNS::" + serNS);
      xsdNS = (String)itResAttrMap.get("xsd");
      this.logger.info("xsdNS::" + xsdNS);
    }
    catch (Exception e)
    {
      this.logger.severe("Could not get IN10S IT Resource data!!");
      updateTaskNote(e.getMessage(), taskInstanceKey);
      e.printStackTrace();
    }
    SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
    
    SOAPConnection soapConnection = soapConnectionFactory.createConnection();
    
    SOAPMessage soapRequest = deleteSOAPRequest(serNS, xsdNS, userLogin);
    if (!soapRequest.equals(null))
    {
      this.logger.info("::SOAP Request Created");
      try
      {
        SOAPMessage soapResponse = soapConnection.call(soapRequest, url);
        
        this.logger.info("SOAP request message::" + getSOAPMsg(soapResponse));
        
        this.logger.info("called IN10S SOAP url successfully");
        
        Iterator iterator = soapResponse.getSOAPBody().getChildElements();
        
        SOAPElement element = (SOAPElement)iterator.next();
        System.out.println(element.getElementName().getLocalName());
        SOAPElement returnRequest = getChildElement(element, "return");
        SOAPElement responseID = getChildElement(returnRequest, "responseID");
        
        SOAPElement operationStatus = getChildElement(returnRequest, "operationStatus");
        
        SOAPElement errorCode = getChildElement(returnRequest, "errorCode");
        
        SOAPElement errorMsg = getChildElement(returnRequest, "errorMsg");
        
        this.logger.info("::1 responseID::" + responseID.getValue());
        this.logger.info("::2 operationStatus::" + operationStatus.getValue());
        
        this.logger.info("::3 errorCode::" + errorCode.getValue());
        this.logger.info("::4 errorMsg::" + errorMsg.getValue());
        CODERESPONSE = operationStatus.getValue();
      }
      catch (Exception e)
      {
        this.logger.info("::Error in calling IN10S web service::" + e.getMessage());
        
        updateTaskNote(e.getMessage(), taskInstanceKey);
        e.printStackTrace();
        throw new Exception("Error in creating user in IN10S");
      }
    }
    try
    {
      soapConnection.close();
    }
    catch (Exception e)
    {
      this.logger.info(e.getMessage());
    }
    return CODERESPONSE;
  }
  
  public SOAPMessage deleteSOAPRequest(String serNS, String xsdNS, String userLogin)
    throws Exception
  {
    String sourceMethod = "deleteSOAPRequest";
    this.logger.info(sourceMethod + " Entering ");
    
    MessageFactory messageFactory = MessageFactory.newInstance();
    SOAPMessage soapMessage = messageFactory.createMessage();
    SOAPPart soapPart = soapMessage.getSOAPPart();
    
    SOAPEnvelope envelope = soapPart.getEnvelope();
    envelope.addNamespaceDeclaration("ser", serNS);
    envelope.addNamespaceDeclaration("xsd", xsdNS);
    
    SOAPBody soapBody = envelope.getBody();
    SOAPElement addUser = soapBody.addChildElement("DeleteIdentity", "ser");
    
    SOAPElement requestParams = addUser.addChildElement("requestParams", "ser");
    
    SOAPElement usrLogin = requestParams.addChildElement("userLogin", "xsd");
    
    usrLogin.addTextNode(userLogin);
    
    soapMessage.saveChanges();
    this.logger.info("SOAP request message::" + getSOAPMsg(soapMessage));
    return soapMessage;
  }
  
  public String disableIn10sUser(String itResourceColumn, String processInstKey, String taskInstanceKey, String userLogin)
    throws Exception
  {
    String CODERESPONSE = "FAILED";
    String url = "";
    String serNS = "";
    String xsdNS = "";
    try
    {
      tcFormInstanceOperationsIntf formOps = (tcFormInstanceOperationsIntf)Platform.getService(tcFormInstanceOperationsIntf.class);
      
      tcResultSet rs = formOps.getProcessFormData(Long.parseLong(processInstKey));
      
      rs.goToRow(0);
      long itResInstanceKey = rs.getLongValue(itResourceColumn);
      tcITResourceInstanceOperationsIntf itResOps = (tcITResourceInstanceOperationsIntf)Platform.getService(tcITResourceInstanceOperationsIntf.class);
      
      tcResultSet rs1 = itResOps.getITResourceInstanceParameters(itResInstanceKey);
      
      Map itResAttrMap = new HashMap();
      int paramCount = rs1.getRowCount();
      for (int i = 0; i < paramCount; i++)
      {
        rs1.goToRow(i);
        itResAttrMap.put(rs1.getStringValue("IT Resources Type Parameter.Name"), rs1.getStringValue("IT Resources Type Parameter Value.Value"));
      }
      url = (String)itResAttrMap.get("URL");
      this.logger.info("URL::" + url);
      serNS = (String)itResAttrMap.get("ser");
      this.logger.info("serNS::" + serNS);
      xsdNS = (String)itResAttrMap.get("xsd");
      this.logger.info("xsdNS::" + xsdNS);
    }
    catch (Exception e)
    {
      this.logger.severe("Could not get IN10S IT Resource data!!");
      updateTaskNote(e.getMessage(), taskInstanceKey);
      e.printStackTrace();
    }
    SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
    
    SOAPConnection soapConnection = soapConnectionFactory.createConnection();
    
    SOAPMessage soapRequest = disableSOAPRequest(serNS, xsdNS, userLogin);
    if (!soapRequest.equals(null))
    {
      this.logger.info("::SOAP Request Created");
      try
      {
        SOAPMessage soapResponse = soapConnection.call(soapRequest, url);
        
        this.logger.info("SOAP request message::" + getSOAPMsg(soapResponse));
        
        this.logger.info("called IN10S SOAP url successfully");
        
        Iterator iterator = soapResponse.getSOAPBody().getChildElements();
        
        SOAPElement element = (SOAPElement)iterator.next();
        System.out.println(element.getElementName().getLocalName());
        SOAPElement returnRequest = getChildElement(element, "return");
        SOAPElement responseID = getChildElement(returnRequest, "responseID");
        
        SOAPElement operationStatus = getChildElement(returnRequest, "operationStatus");
        
        SOAPElement errorCode = getChildElement(returnRequest, "errorCode");
        
        SOAPElement errorMsg = getChildElement(returnRequest, "errorMsg");
        
        this.logger.info("::1 responseID::" + responseID.getValue());
        this.logger.info("::2 operationStatus::" + operationStatus.getValue());
        
        this.logger.info("::3 errorCode::" + errorCode.getValue());
        this.logger.info("::4 errorMsg::" + errorMsg.getValue());
        CODERESPONSE = operationStatus.getValue();
      }
      catch (Exception e)
      {
        this.logger.info("::Error in calling IN10S web service::" + e.getMessage());
        
        updateTaskNote(e.getMessage(), taskInstanceKey);
        e.printStackTrace();
        throw new Exception("Error in creating user in IN10S");
      }
    }
    try
    {
      soapConnection.close();
    }
    catch (Exception e)
    {
      updateTaskNote(e.getMessage(), taskInstanceKey);
      this.logger.info(e.getMessage());
    }
    return CODERESPONSE;
  }
  
  public SOAPMessage disableSOAPRequest(String serNS, String xsdNS, String userLogin)
    throws Exception
  {
    String sourceMethod = "disableSOAPRequest";
    this.logger.info(sourceMethod + " Entering ");
    
    MessageFactory messageFactory = MessageFactory.newInstance();
    SOAPMessage soapMessage = messageFactory.createMessage();
    SOAPPart soapPart = soapMessage.getSOAPPart();
    
    SOAPEnvelope envelope = soapPart.getEnvelope();
    envelope.addNamespaceDeclaration("ser", serNS);
    envelope.addNamespaceDeclaration("xsd", xsdNS);
    
    SOAPBody soapBody = envelope.getBody();
    SOAPElement addUser = soapBody.addChildElement("DisableIdentity", "ser");
    
    SOAPElement requestParams = addUser.addChildElement("requestParams", "ser");
    
    SOAPElement usrLogin = requestParams.addChildElement("userLogin", "xsd");
    
    usrLogin.addTextNode(userLogin);
    
    soapMessage.saveChanges();
    this.logger.info("SOAP request message::" + getSOAPMsg(soapMessage));
    return soapMessage;
  }
  
  public String enableIn10sUser(String itResourceColumn, String processInstKey, String taskInstanceKey, String userLogin)
    throws Exception
  {
    String CODERESPONSE = "FAILED";
    String url = "";
    String serNS = "";
    String xsdNS = "";
    try
    {
      tcFormInstanceOperationsIntf formOps = (tcFormInstanceOperationsIntf)Platform.getService(tcFormInstanceOperationsIntf.class);
      
      tcResultSet rs = formOps.getProcessFormData(Long.parseLong(processInstKey));
      
      rs.goToRow(0);
      long itResInstanceKey = rs.getLongValue(itResourceColumn);
      tcITResourceInstanceOperationsIntf itResOps = (tcITResourceInstanceOperationsIntf)Platform.getService(tcITResourceInstanceOperationsIntf.class);
      
      tcResultSet rs1 = itResOps.getITResourceInstanceParameters(itResInstanceKey);
      
      Map itResAttrMap = new HashMap();
      int paramCount = rs1.getRowCount();
      for (int i = 0; i < paramCount; i++)
      {
        rs1.goToRow(i);
        itResAttrMap.put(rs1.getStringValue("IT Resources Type Parameter.Name"), rs1.getStringValue("IT Resources Type Parameter Value.Value"));
      }
      url = (String)itResAttrMap.get("URL");
      this.logger.info("URL::" + url);
      serNS = (String)itResAttrMap.get("ser");
      this.logger.info("serNS::" + serNS);
      xsdNS = (String)itResAttrMap.get("xsd");
      this.logger.info("xsdNS::" + xsdNS);
    }
    catch (Exception e)
    {
      this.logger.severe("Could not get IN10S IT Resource data!!");
      updateTaskNote(e.getMessage(), taskInstanceKey);
      e.printStackTrace();
    }
    SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
    
    SOAPConnection soapConnection = soapConnectionFactory.createConnection();
    
    SOAPMessage soapRequest = enableSOAPRequest(serNS, xsdNS, userLogin);
    if (!soapRequest.equals(null))
    {
      this.logger.info("::SOAP Request Created");
      try
      {
        SOAPMessage soapResponse = soapConnection.call(soapRequest, url);
        
        this.logger.info("SOAP request message::" + getSOAPMsg(soapResponse));
        
        this.logger.info("called IN10S SOAP url successfully");
        
        Iterator iterator = soapResponse.getSOAPBody().getChildElements();
        
        SOAPElement element = (SOAPElement)iterator.next();
        System.out.println(element.getElementName().getLocalName());
        SOAPElement returnRequest = getChildElement(element, "return");
        SOAPElement responseID = getChildElement(returnRequest, "responseID");
        
        SOAPElement operationStatus = getChildElement(returnRequest, "operationStatus");
        
        SOAPElement errorCode = getChildElement(returnRequest, "errorCode");
        
        SOAPElement errorMsg = getChildElement(returnRequest, "errorMsg");
        
        this.logger.info("::1 responseID::" + responseID.getValue());
        this.logger.info("::2 operationStatus::" + operationStatus.getValue());
        
        this.logger.info("::3 errorCode::" + errorCode.getValue());
        this.logger.info("::4 errorMsg::" + errorMsg.getValue());
        CODERESPONSE = operationStatus.getValue();
      }
      catch (Exception e)
      {
        this.logger.info("::Error in calling IN10S web service::" + e.getMessage());
        
        updateTaskNote(e.getMessage(), taskInstanceKey);
        e.printStackTrace();
        throw new Exception("Error in creating user in IN10S");
      }
    }
    try
    {
      soapConnection.close();
    }
    catch (Exception e)
    {
      updateTaskNote(e.getMessage(), taskInstanceKey);
      this.logger.info(e.getMessage());
    }
    return CODERESPONSE;
  }
  
  public SOAPMessage enableSOAPRequest(String serNS, String xsdNS, String userLogin)
    throws Exception
  {
    String sourceMethod = "enableSOAPRequest";
    this.logger.info(sourceMethod + " Entering ");
    
    MessageFactory messageFactory = MessageFactory.newInstance();
    SOAPMessage soapMessage = messageFactory.createMessage();
    SOAPPart soapPart = soapMessage.getSOAPPart();
    
    SOAPEnvelope envelope = soapPart.getEnvelope();
    envelope.addNamespaceDeclaration("ser", serNS);
    envelope.addNamespaceDeclaration("xsd", xsdNS);
    
    SOAPBody soapBody = envelope.getBody();
    SOAPElement addUser = soapBody.addChildElement("EnableIdentity", "ser");
    
    SOAPElement requestParams = addUser.addChildElement("requestParams", "ser");
    
    SOAPElement usrLogin = requestParams.addChildElement("userLogin", "xsd");
    
    usrLogin.addTextNode(userLogin);
    
    soapMessage.saveChanges();
    this.logger.info("SOAP request message::" + getSOAPMsg(soapMessage));
    return soapMessage;
  }
  
  private void updateTaskNote(String taskNote, String taskInstanceKey)
  {
    String methodName = "updateTaskNote";
    this.logger.entering(this.className, methodName);
    if (taskNote == null) {
      return;
    }
    try
    {
      tcProvisioningOperationsIntf provOps = (tcProvisioningOperationsIntf)Platform.getService(tcProvisioningOperationsIntf.class);
      
      Map attrMap = new HashMap();
      attrMap.put("Process Instance.Task Details.Note", taskNote);
      tcResultSet taskDetails = provOps.getProvisioningTaskDetails(Long.parseLong(taskInstanceKey));
      
      byte[] rowVer = taskDetails.getByteArrayValue("Process Instance.Task Details.Row Version");
      
      provOps.updateTask(Long.parseLong(taskInstanceKey), rowVer, attrMap);
    }
    catch (Exception e)
    {
      this.logger.severe("Error in updating task note. " + e.getMessage());
    }
    this.logger.exiting(this.className, methodName);
  }
  
  public static String getSOAPMsg(SOAPMessage message)
  {
    String msg = null;
    try
    {
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      message.writeTo(baos);
      msg = baos.toString();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return msg;
  }
  
  public static SOAPElement getChildElement(SOAPElement parentElement, String childTagName)
  {
    Iterator iterator = parentElement.getChildElements();
    while (iterator.hasNext())
    {
      SOAPElement element = (SOAPElement)iterator.next();
      if (element.getElementName().getLocalName().equals(childTagName)) {
        return element;
      }
    }
    return null;
  }
  
  public static SOAPElement addChildNode(SOAPElement parentNode, String nodeName)
    throws Exception
  {
    SOAPElement childElement = parentNode.addChildElement(nodeName);
    return childElement;
  }
  
  public static SOAPElement addChildNodeWithValue(SOAPElement parentNode, String nodeName, String value)
    throws Exception
  {
    if ((value == null) || (value.isEmpty())) {
      return null;
    }
    SOAPElement childElement = addChildNode(parentNode, nodeName);
    childElement.addTextNode(value);
    return childElement;
  }
  
  public Map getUserDefFormValue(String pProcessKey)
    throws tcAPIException, tcInvalidLookupException, tcColumnNotFoundException, tcFormNotFoundException, tcProcessNotFoundException, tcVersionNotFoundException, tcNotAtomicProcessException
  {
    tcFormInstanceOperationsIntf formInstOps = (tcFormInstanceOperationsIntf)Platform.getService(tcFormInstanceOperationsIntf.class);
    
    tcFormDefinitionOperationsIntf formDef = (tcFormDefinitionOperationsIntf)Platform.getService(tcFormDefinitionOperationsIntf.class);
    
    long l = new Long(pProcessKey).longValue();
    
    tcResultSet tcresultset = formInstOps.getProcessFormData(l);
    
    long l1 = formInstOps.getProcessFormDefinitionKey(l);
    tcResultSet formFieldresultset = null;
    try
    {
      formFieldresultset = formDef.getFormFields(l1, formInstOps.getActiveVersion(l1));
    }
    catch (tcVersionNotDefinedException e)
    {
      this.logger.severe("tcVersionNotDefinedException::" + e.getMessage());
      
      e.printStackTrace();
    }
    int formfieldCount = formFieldresultset.getRowCount();
    Map result = new HashMap();
    for (int j1 = 0; j1 < formfieldCount; j1++)
    {
      formFieldresultset.goToRow(j1);
      String s4 = formFieldresultset.getStringValue(sFormsFieldLabel);
      String val = tcresultset.getStringValue(formFieldresultset.getStringValue(sFormsColumnName));
      
      result.put(s4, val);
    }
    return result;
  }
  
  public static Map<String, String> getConfigLookupValues(String lookup)
  {
    tcLookupOperationsIntf lookupIntf = (tcLookupOperationsIntf)Platform.getService(tcLookupOperationsIntf.class);
    
    Map configMap = new HashMap();
    try
    {
      tcResultSet lookupVal = lookupIntf.getLookupValues(lookup);
      for (int i = 0; i < lookupVal.getRowCount(); i++)
      {
        lookupVal.goToRow(i);
        configMap.put(lookupVal.getStringValue("Lookup Definition.Lookup Code Information.Code Key"), lookupVal.getStringValue("Lookup Definition.Lookup Code Information.Decode"));
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    try
    {
      lookupIntf.close();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return configMap;
  }
}
